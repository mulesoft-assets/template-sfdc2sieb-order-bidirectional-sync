<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and Siebel Order Bidirectional Sync</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
			<![CDATA[
As a Salesforce admin I want to have my Orders synchronized between Salesforce and Oracle Siebel Business Objects.

This Template should serve as a foundation for setting an online bi-directional sync of Orders between Salesforce and Oracle Siebel Business Objects, being able to specify filtering criteria. 

The integration main behaviour is polling for changes (new Order or modified ones) that have occured either in Salesforce or Siebel during a certain defined period of time. For those Orders that both have not been updated yet the integration triggers an upsert (update or create depending on the case) taking the last modification as the one that should be applied.

In this template you have option to decide whether to use the traditional Polling trigger flow which will repeatedly poll source for changes and updates or you can decide to use the Push Notification trigger flow which reflects changes in source instantly. Everytime there is a new order or a change in an already existing one, the integration template will receive notification instantly from Salesforce or Siebel instance and it will be responsible for updating the order on the target.

Requirements have been set not only to be used as examples, but also to establish starting point to adapt the integration to any given requirements.

### Template overview
Let's say we want to keep Salesforce instance synchronized with Siebel. Then, the integration behavior can be summarized just with the following steps:

1. Ask Salesforce:
> *Which changes have there been since the last time I got in touch with you?*

2. For each of the updates fetched in the previous step (1.), ask Siebel:
> *Does the update received from Salesforce should be applied?*

3. If Siebel answer for the previous question (2.) is *Yes*, then *upsert* (create or update depending each particular case) Siebel with the belonging change

4. Repeat previous steps (1. to 3.) the other way around (using Siebel as source instance and Salesforce as the target one)

 Repeat *ad infinitum*:

5. Ask Salesforce:
> *Which changes have there been since the question I've made in the step 1.?*

And so on...
]]>
		</section>
		<section id="sieb_dst">
<![CDATA[
In order to make the siebel connector work smoothly you have to provide the correct version of the siebel jars (Siebel.jar, SiebelJI_enu.jar) that works with your Siebel installation.
]]>
		</section>
		<section id="considerations">
		<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made in order for all to run smoothly. **Failling to do so could lead to unexpected behavior of the template.**
+ Add text custom field SiebelOrder__c to Order object. This will store Siebel Order Header Id, which is then used to find the matching existing order in Siebel.
+ Add text custom field SiebelExternalId__c to Product2 object. And fill it with appropriate value of matching Product Id from Siebel. There should be 1 to 1 relation between Products in Salesforce and Siebel.

For setting up Push notification these extra steps needs to be done
+ Define Salesforce outbound messaging and a simple workflow rule on Order object. [This article will show you how to accomplish this](https://www.salesforce.com/us/developer/docs/api/Content/sforce_api_om_outboundmessaging_setting_up.htm). The most important setting here is the `Endpoint URL` which needs to point to your application running on Cloudbhub, eg. `http://yourapp.cloudhub.io:80`. Additionaly, try to add just few fields to the `Fields to Send` to keep it simple for begin.
+ Deploy custom script to your Siebel instance which will send notification to the Siebel Inbound Http connector whenever order in Siebel is updated.
+ Set Initial State of Polling inbound flows to Stopped and Http inboud flows to Started.
+ Deploy the template to Cloudhub.
]]>
		</section>
		<section id="application_configuration">
			<![CDATA[
+ http.port `9090`
+ poll.frequencyMillis `60000`
+ poll.startDelayMillis `1000`
+ watermark.default.expression.sfdc `YESTERDAY` or `2015-10-29T10:00:00.000Z`
+ watermark.default.expression.sieb `"10/29/2015 10:00:00"`

#### Oracle Siebel Business Objects Connector configuration
+ sieb.user `SADMIN`
+ sieb.password `SADMIN`
+ sieb.server `192.168.10.8`
+ sieb.serverName `SBA_82`
+ sieb.objectManager `EAIObjMgr_enu`
+ sieb.port `2321`
+ sieb.integration.user.id= `A0ed000BO9T`  
+ sieb.timeOffset=`-07:00` - timezone offset between timezone defined in Siebel and GMT 

#### Salesforce Connector configuration
+ sfdc.username `bob.dylan@org`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.url `https://login.salesforce.com/services/Soap/u/32.0`

+ sfdc.integration.user.id= `A0ed000BO9T`

	**Note:** To find out the correct *sfdc.integration.user.id* value, please, refer to example project **Salesforce Data Retrieval** in [Anypoint Exchange](http://www.mulesoft.org/documentation/display/current/Anypoint+Exchange).

+ sfdc.contract.id=80020000005mj5d  - id of existing contract which is used during Order creation
+ sfdc.pricebook.id=01s20000001SwEQAA0
]]>
		</section>
		<section id="api_calls">
			<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The Anypoint Template calls to the API can be calculated using the formula:

***1 + 2*X + X / 200 + Y ***

Being ***X*** the number of Orders to be synchronized on each run and ***Y*** the number of Order line Items. 

The division by ***200*** is because, by default, Orders are gathered in groups of 200 for each Upsert API Call in the commit step. Also consider that this calls are executed repeatedly every polling cycle.	

]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is file is conformed by a Flow containing the Poll that will periodically query either in Salesforce or Siebel for updated/created Contacts that meet the defined criteria in the query. And then executing the batch job process with the query results.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Anypoint Template is implemented in this XML, directed by a batch job that will be responsible for creations/updates. The severeal message processors constitute four high level actions that fully implement the logic of this Anypoint Template:

1. Job execution is invoked from triggerFlow (endpoints.xml) everytime there is a new query executed asking for created/updated Contacts.
2. During the Process stage, each Salesforce contact will be filtered depending on, if it has an existing matching contact in the Siebel and vise versa.
3. The last step of the Process stage will group the contacts and create/update them either in Salesforce or Siebel.
Finally during the On Complete stage the Anypoint Template will log statistics data into the console.
]]>
		</section>
	</sections>
</configuration>